{"version":3,"sources":["i2-features/f3-playlists/p1-ui/PlaylistPage.module.css","i2-features/f1-login/l1-ui/LoginPage.module.css","i1-main/m1-ui/u0-common/u5-spins/CustomSpin.module.css","i1-main/m3-dal/instance.ts","i2-features/f3-playlists/p3-dal/PlaylistsAPI.ts","i1-main/m2-bll/appReducer.ts","i2-features/f3-playlists/p2-bll/playlistsReducer.ts","i1-main/m2-bll/helpers.ts","i2-features/f3-playlists/p3-dal/PlaylistsTests.ts","i2-features/f3-playlists/p1-ui/PlaylistsPage.tsx","i2-features/f1-login/l1-ui/LoginForm/LoginForm.tsx","i2-features/f1-login/l3-dal/LoginAPI.ts","i2-features/f1-login/l2-bll/loginReducer.ts","i1-main/m1-ui/u0-common/u5-spins/CustomSpin.tsx","i2-features/f1-login/l1-ui/LoginForm/LoginFormContainer.tsx","i2-features/f1-login/l1-ui/LoginPage.tsx","i1-main/m1-ui/u3-routes/Routes.tsx","i1-main/m1-ui/u4-header/Header.tsx","i1-main/m1-ui/u2-main/Main.tsx","i1-main/m2-bll/store.ts","i1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx","i2-features/f1-login/l1-ui/LoginForm/LoginForm.module.css"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","PlaylistsAPI","get","then","res","data","post","id","delete","put","playlist","_id","name","someThunk","createAsyncThunk","payload","thunkAPI","a","Promise","rej","x","z","p","console","log","rejectWithValue","y","slice","createSlice","initialState","isLoading","reducers","setX","state","action","setLoading","extraReducers","builder","addCase","fulfilled","appReducer","reducer","appActions","actions","selectApp","rejected","app","getPlaylists","dispatch","playlists","error","addPlaylist","undefined","response","message","deletePlaylist","updatePlaylist","playlistsReducer","playlistsThunks","selectPlaylists","useActions","useDispatch","useMemo","bindActionCreators","postTest","time","Date","getTime","PlaylistsPage","useSelector","mappedPlaylists","map","mappedTags","tags","t","key","style","display","width","levelAccess","updated","toLocaleDateString","className","s","button","disabled","onClick","LoginForm","React","memo","token","setToken","sendToken","loading","form","prefix","placeholder","value","autoFocus","maxLength","onChange","e","currentTarget","onPressEnter","suffix","EnterOutlined","loginButton","LoginAPI","login","sendTokenThunk","loginActions","isSuccess","clear","loginReducer","loginThunks","selectLogin","CustomSpin","size","restProps","base","LoginFormContainer","tokenInParams","useParams","useState","firstRendering","setFirstRendering","redirect","setRedirect","spin","setSpin","useCallback","useEffect","success","setTimeout","to","PATH","PROFILE","LoginPage","LOGIN","PLAYLISTS","Routes","path","exact","render","Header","title","subTitle","href","rel","target","extra","Main","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a9c58052.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"PlaylistPage_button__3da6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"LoginPage_LoginPage__LrBOi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"CustomSpin_base__2qa5N\"};","import axios from 'axios'\r\n\r\n// export const baseURL = 'http://localhost:7542/1.0/'\r\nexport const baseURL = 'https://personal-area-it-incubator.herokuapp.com/1.0/'\r\n\r\nexport const instance = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n})\r\n","import {instance} from '../../../i1-main/m3-dal/instance'\r\n\r\nexport type PlaylistType = {\r\n    _id: string\r\n\r\n    name: string\r\n    levelAccess: number\r\n    tags: string[]\r\n    // position number\r\n    // start/end date access\r\n\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type GetAllAnswerType = {\r\n    playlists: PlaylistType[]\r\n    playlistsTotalCount: number\r\n}\r\n\r\nexport const PlaylistsAPI = {\r\n    getAll: () => {\r\n        return instance.get<GetAllAnswerType>('playlists')\r\n            .then(res => res.data)\r\n    },\r\n    add: (data: any) => {\r\n        return instance.post<GetAllAnswerType>('playlists2', data)\r\n            .then(res => res.data)\r\n    },\r\n    delete: (id: string) => {\r\n        return instance.delete<GetAllAnswerType>('playlists/' + id)\r\n            .then(res => res.data)\r\n    },\r\n    update: (id: string) => {\r\n        return instance.put<GetAllAnswerType>('playlists', {\r\n            playlist: {\r\n                _id: id,\r\n                name: 'new Pl',\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from './store'\r\n\r\n// < {answer}, {params}, {rejectValue {in catch}}>\r\nexport const someThunk = createAsyncThunk<{ z: number }, { x: number }, { rejectValue: { y: number } }>(\r\n    'app/someThunk',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        // thunkAPI.getState() as AppStoreType\r\n        // thunkAPI.dispatch(setX(payload))\r\n\r\n        try {\r\n            const p = await new Promise<{ z: number }>(((res, rej) => {\r\n                if (payload.x < 10) res({z: payload.x})\r\n\r\n                rej({z: payload.x})\r\n            }))\r\n\r\n            // thunkAPI.dispatch(someThunk.fulfilled({z: 1}, 'reqId', {x: 1}))\r\n\r\n            return p\r\n            // return {z: 1}\r\n        } catch (er) {\r\n\r\n            console.log('er', {...er}, er)\r\n            return thunkAPI.rejectWithValue({y: payload.x})\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        x: 1, y: 2, z: 3,\r\n        isLoading: false,\r\n    },\r\n    reducers: {\r\n        setX: (state, action: PayloadAction<{ x: number }>) => {\r\n            state.x = action.payload.x\r\n        },\r\n        setLoading: (state, action: PayloadAction<{isLoading: boolean}>) => {\r\n            state.isLoading = action.payload.isLoading\r\n        }\r\n\r\n    },\r\n    // extraReducers: {\r\n    //     // 'blabla': state => {},\r\n    //     // [someAC.type]: state => {},\r\n    // },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(setX, (state, action) => {\r\n        //     state.y = action.payload.x\r\n        // })\r\n        builder\r\n            .addCase(someThunk.fulfilled, (state, action) => {\r\n                state.z = action.payload.z\r\n            })\r\n        // .addCase() ...\r\n\r\n    },\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\nexport const someThunkRej = someThunk.rejected\r\nexport const appThunks = {someThunk}\r\n\r\nexport const selectApp = (state: AppStoreType) => state.app\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from \"../../../i1-main/m2-bll/store\";\r\nimport {PlaylistsAPI, PlaylistType} from \"../p3-dal/PlaylistsAPI\";\r\nimport {appActions} from \"../../../i1-main/m2-bll/appReducer\";\r\n\r\nexport const getPlaylists = createAsyncThunk<{playlists: PlaylistType[]}, { }, { rejectValue: {error: any} }>(\r\n    'playlists/getPlaylists',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        // thunkAPI.getState() as AppStoreType\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n\r\n        try {\r\n            const p = await PlaylistsAPI.getAll()\r\n\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n\r\n            return {playlists: p.playlists}\r\n        } catch (er) {\r\n\r\n            console.log('er', {...er}, er)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: {...er}})\r\n        }\r\n    })\r\nexport const addPlaylist = createAsyncThunk<{}, {}, { rejectValue: { error: any } }>(\r\n    'playlists/addPlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.add(undefined)\r\n\r\n\r\n            // thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\nexport const deletePlaylist = createAsyncThunk<{}, {id: string}, { rejectValue: { error: any } }>(\r\n    'playlists/deletePlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.delete(payload.id)\r\n\r\n\r\n            thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\nexport const updatePlaylist = createAsyncThunk<{}, {id: string}, { rejectValue: { error: any } }>(\r\n    'playlists/updatePlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.update(payload.id)\r\n\r\n\r\n            thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'playlists',\r\n    initialState: {\r\n       playlists: [] as PlaylistType[]\r\n    },\r\n    reducers: {\r\n        // setX: (state, action: PayloadAction<{ x: number }>) => {\r\n        //     state.x = action.payload.x\r\n        // },\r\n\r\n    },\r\n    // extraReducers: {\r\n    //     // 'blabla': state => {},\r\n    //     // [someAC.type]: state => {},\r\n    // },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(setX, (state, action) => {\r\n        //     state.y = action.payload.x\r\n        // })\r\n\r\n        builder\r\n            .addCase(getPlaylists.fulfilled, (state, action) => {\r\n                state.playlists = action.payload.playlists\r\n            })\r\n            // .addCase() ...\r\n\r\n    },\r\n})\r\n\r\nexport const playlistsReducer = slice.reducer\r\nexport const playlistsActions = slice.actions\r\nexport const playlistsThunks = {getPlaylists, addPlaylist, deletePlaylist, updatePlaylist}\r\n// export const someThunkRej = someThunk.rejected\r\n// export const appThunks = {someThunk}\r\n//\r\nexport const selectPlaylists = (state: AppStoreType) => state.playlists\r\n","import {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\nimport store from './store'\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n// https://medium.com/@d.maklygin/redux-typescript-reuse-the-type-of-an-action-creators-return-value-91663a48858f\r\ntype IsValidArg<T> = T extends object ? keyof T extends never ? false : true : true;\r\nexport type ActionCreatorResponse<T extends (...args: any[]) => any> = ReturnType<ReturnType<T>>\r\nexport type ReplaceReturnType<T, TNewReturn> = T extends (a: infer A) => infer R\r\n    ? (IsValidArg<A> extends true ? (a: A) => TNewReturn : () => TNewReturn)\r\n    : never\r\nexport type RemapActionCreators<T extends ActionCreatorsMapObject> = {\r\n    [K in keyof T]: ReplaceReturnType<T[K], ActionCreatorResponse<T[K]>>\r\n}\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    // return useMemo(() => bindActionCreators<T, any>(actions, dispatch), [actions, dispatch])\r\n    return useMemo(() => bindActionCreators<T, RemapActionCreators<T>>(actions, dispatch), [actions, dispatch])\r\n}\r\n","import {PlaylistsAPI} from \"./PlaylistsAPI\";\r\n\r\nexport const LogPr = (pr: Promise<any>) => {\r\n    return pr\r\n        .then(data => console.log(data))\r\n        .catch(e => console.log(!e.response\r\n            ? [e.message, {...e}]\r\n            : e.response.data\r\n        ))\r\n}\r\n\r\nexport const postTest = async () => {\r\n    const time = new Date().getTime()\r\n\r\n    // console.log('PlaylistsAPI.add(undefined): ')\r\n    // await LogPr(PlaylistsAPI.add(undefined))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: 1}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: 1}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: \"\"}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: ''}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: undefined}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: undefined}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: null}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: null}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: {}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: {}}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString()}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString()}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: undefined}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: undefined}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: null}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: null}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: \"number\"}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 'number'}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: {}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: {}}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: undefined}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: undefined}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: null}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: null}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: \"number\"}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: 'number'}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: 1000000}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: 1000000}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: {}}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: {}}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: []}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: []}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [\"string\"]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: ['string']}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [\"number\"]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: ['number']}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [undefined]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: [undefined]}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [1]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: [1]}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [{}]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: [{}]}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [\"\"]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: [\"\"]}}))\r\n    //\r\n    // console.log('PlaylistsAPI.add({playlist: {name: Math.random().toString(), tags: [\"x\", 1]]}): ')\r\n    // await LogPr(PlaylistsAPI.add({playlist: {name: Math.random().toString(), levelAccess: 1000000, tags: [\"x\", 1]}}))\r\n\r\n\r\n\r\n    console.log('time: ', new Date().getTime() - time)\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport {playlistsThunks, selectPlaylists} from '../p2-bll/playlistsReducer'\r\nimport {useActions} from \"../../../i1-main/m2-bll/helpers\";\r\nimport {selectApp} from \"../../../i1-main/m2-bll/appReducer\";\r\nimport s from './PlaylistPage.module.css'\r\nimport {Button} from \"antd\";\r\nimport {postTest} from \"../p3-dal/PlaylistsTests\";\r\n\r\nconst PlaylistsPage = () => {\r\n    const {playlists} = useSelector(selectPlaylists)\r\n    const {isLoading} = useSelector(selectApp)\r\n    const {getPlaylists, addPlaylist, deletePlaylist, updatePlaylist} = useActions(playlistsThunks)\r\n\r\n    // useEffect(() => {\r\n    //     getPlaylists()\r\n    // }, [getPlaylists])\r\n\r\n    const mappedPlaylists = playlists.map(p => {\r\n        const mappedTags = p.tags.map(t => (\r\n            <span key={t}>{t},</span>\r\n        ))\r\n\r\n        return (\r\n            <div key={p._id}>\r\n                <div style={{display: \"inline-block\", width: 100}}>{p.name}</div>\r\n                <div style={{display: \"inline-block\", width: 100}}>{p.levelAccess}</div>\r\n                <div style={{display: \"inline-block\", width: 100}}>{new Date(p.updated).toLocaleDateString()}</div>\r\n                <div style={{display: \"inline-block\", width: 100}}>[{mappedTags}]</div>\r\n\r\n                {/*<div className={s.button} style={{display: \"inline-block\", width: 30,*/}\r\n                {/*     margin: 5*/}\r\n                {/*}}>*/}\r\n                    <Button\r\n                        className={s.button}\r\n                    // style={{\r\n                    //     background: \"black\",\r\n                    //     width: '100%', outline: \"none\"\r\n                    // }}\r\n                    disabled={isLoading} onClick={() => deletePlaylist({id: p._id})}\r\n                >\r\n                        X\r\n                    </Button>\r\n                {/*</div>*/}\r\n\r\n                <button\r\n                    // style={{background: \"black\"}}\r\n                    disabled={isLoading} onClick={() => updatePlaylist({id: p._id})}\r\n                >+++</button>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={postTest}>test add</button>\r\n\r\n\r\n            pl\r\n            <button\r\n                // style={{background: \"black\"}}\r\n                disabled={isLoading} onClick={addPlaylist}>add</button>\r\n            <div>\r\n                {mappedPlaylists}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaylistsPage\r\n","import React from 'react'\r\nimport s from './LoginForm.module.css'\r\n// import Container from \"../../../../../p1-common/c1-ui/u1-containers/Container\";\r\n// import CustomButton from \"../../../../../p1-common/c1-ui/u2-buttons/CustomButton\";\r\n// import\r\n//     // CustomInput,\r\n// {ClassCustomInput} from \"../../../../../p1-common/c1-ui/u3-inputs/CustomInput\";\r\nimport {EnterOutlined} from '@ant-design/icons'\r\nimport {\r\n    Button, Input,\r\n    // Form,\r\n} from 'antd'\r\n\r\n// export type LoginFormDataType = {\r\n//     token?: string\r\n// }\r\n//\r\n// export type LoginFormErrorDataType = {\r\n//     values: LoginFormDataType\r\n//     errorFields: {\r\n//         name: (string | number)[]\r\n//         errors: string[]\r\n//     }[]\r\n//     outOfDate: boolean\r\n// }\r\n\r\ntype LoginFormPropsType = {\r\n    loading: boolean\r\n    token: string\r\n    setToken: (token: string) => void;\r\n    sendToken: () => void\r\n    // onFinish: (values: LoginFormDataType) => void\r\n    // onFinishFailed: (errorInfo: LoginFormErrorDataType) => void\r\n}\r\n\r\nconst LoginForm: React.FC<LoginFormPropsType> = React.memo((\r\n    {token, setToken, sendToken, loading}\r\n) => {\r\n    return (\r\n        <div className={s.LoginForm}>\r\n            Login\r\n\r\n            <div className={s.form}>\r\n                <Input\r\n                    prefix={'t: '}\r\n                    placeholder={'* please input token'}\r\n                    value={token}\r\n                    autoFocus\r\n                    maxLength={36}\r\n                    onChange={e => setToken(e.currentTarget.value)}\r\n                    onPressEnter={sendToken}\r\n                    suffix={<EnterOutlined onClick={sendToken}/>}\r\n                />\r\n\r\n                <Button\r\n                    className={s.loginButton}\r\n                    loading={loading}\r\n                    onClick={sendToken}\r\n                >\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // return (\r\n    //     <Container className={s.LoginForm}>\r\n    //         login\r\n    //\r\n    //         <Form\r\n    //             name=\"token form\"\r\n    //             initialValues={{token}}\r\n    //             onFinish={onFinish}\r\n    //             onFinishFailed={onFinishFailed}\r\n    //             className={s.form}\r\n    //         >\r\n    //             <Form.Item\r\n    //                 // label=\" \"\r\n    //                 name=\"token\" // !!! warning !!! // Function components cannot be given refs. // if FunctionalInputComponent\r\n    //                 rules={[\r\n    //                     {required: true, message: \"Please input your token!\"},\r\n    //                     // { // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     //     validator: (formItemInfo, inputValue) => {\r\n    //                     //         log(formItemInfo, inputValue);\r\n    //                     //         if (inputValue === \"test\") return Promise.reject('test error');\r\n    //                     //         else return Promise.resolve();\r\n    //                     //     }\r\n    //                     // },\r\n    //                     // {len: 36, message: \"Length must be 36\"}, // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                 ]}\r\n    //             >\r\n    //                 <ClassCustomInput\r\n    //                     // <CustomInput // !!! warning !!! // Function components cannot be given refs. // if FunctionalInputComponent\r\n    //                     // <Input\r\n    //                     prefix={\"t: \"}\r\n    //                     placeholder={\"* please input token\"}\r\n    //                     value={token}\r\n    //                     autoFocus\r\n    //                     maxLength={36}\r\n    //                     onChangeText={setToken} // no in antd Input\r\n    //                     onPressEnter={sendToken}\r\n    //                     suffix={<EnterOutlined onClick={sendToken}/>}\r\n    //\r\n    //                     renderLog={\"7 +-- rendering log() token input\"} // no in antd Input\r\n    //                 />\r\n    //             </Form.Item>\r\n    //\r\n    //             <Form.Item>\r\n    //                 <CustomButton // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     // <Button //  !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     htmlType=\"submit\"\r\n    //                     className={s.loginButton}\r\n    //                     loading={loading}\r\n    //\r\n    //                     renderLog={\"7 +-- rendering log() login button\"} // no in antd Button\r\n    //                 >\r\n    //                     Login\r\n    //                     {/*</Button>*/}\r\n    //                 </CustomButton>\r\n    //             </Form.Item>\r\n    //         </Form>\r\n    //     </Container>\r\n    // )\r\n})\r\n\r\nexport default LoginForm\r\n","import {instance} from '../../../i1-main/m3-dal/instance'\r\n\r\ntype LoginType = {\r\n    error?: string\r\n}\r\n\r\nexport const LoginAPI = {\r\n    login: async (token: string) => {\r\n        const response = await instance.post<LoginType>('/auth/login', {token})\r\n\r\n        return response.data\r\n    },\r\n\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from '../../../i1-main/m2-bll/store'\r\nimport {LoginAPI} from '../l3-dal/LoginAPI'\r\n\r\n// < {answer}, {params}, {rejectValue {in catch}}>\r\nexport const sendTokenThunk =\r\n    createAsyncThunk<{ error?: string }, { token: string }, { rejectValue: { token: string } }>(\r\n        'login/sendTokenThunk',\r\n        async (\r\n            payload, thunkAPI\r\n        ) => {\r\n            // thunkAPI.getState() as AppStoreType\r\n            thunkAPI.dispatch(loginActions.setLoading({isLoading: true}))\r\n\r\n            try {\r\n                // const p = await new Promise<{ error: string }>(((res, rej) => {\r\n                //     if (payload.token.length > 3) setTimeout(() => res({error: ''}), 1500)\r\n                //\r\n                //     else setTimeout(() => rej({error: 'not valid token'}), 1500)\r\n                // }))\r\n                const p = await LoginAPI.login(payload.token)\r\n\r\n                thunkAPI.dispatch(sendTokenThunk\r\n                    .fulfilled({error: p.error}, 'xzId1', {token: payload.token}))\r\n\r\n                return p\r\n            } catch (er) {\r\n                const error = er.response ? er.response.data.error : (er.message + ', more details in the console')\r\n\r\n\r\n                thunkAPI.dispatch(sendTokenThunk\r\n                    .fulfilled({error}, 'xzId1', {token: payload.token}))\r\n\r\n                console.log('er', {...er}, er)\r\n                return thunkAPI.rejectWithValue({token: payload.token})\r\n            }\r\n        }\r\n    )\r\n\r\nconst slice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        isLoading: false,\r\n        isSuccess: false,\r\n        error: '',\r\n    },\r\n    reducers: {\r\n        clear: (state, action: PayloadAction<void>) => {\r\n            state.isLoading = false\r\n            state.isSuccess = false\r\n            state.error = ''\r\n        },\r\n        setLoading: (state, action: PayloadAction<{ isLoading: boolean }>) => {\r\n            state.isLoading = action.payload.isLoading\r\n        }\r\n\r\n    },\r\n    // extraReducers: {\r\n    //     // 'blabla': state => {},\r\n    //     // [someAC.type]: state => {},\r\n    // },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(setX, (state, action) => {\r\n        //     state.y = action.payload.x\r\n        // })\r\n        builder\r\n            .addCase(\r\n                sendTokenThunk.fulfilled,\r\n                (state, action) => {\r\n                    state.isSuccess = !action.payload.error\r\n                    state.error = action.payload.error || ''\r\n                    state.isLoading = false\r\n                }\r\n            )\r\n        // .addCase() ...\r\n\r\n    },\r\n})\r\n\r\nexport const loginReducer = slice.reducer\r\nexport const loginActions = slice.actions\r\n// export const someThunkRej = someThunk.rejected\r\nexport const loginThunks = {sendTokenThunk}\r\n\r\nexport const selectLogin = (state: AppStoreType) => state.login\r\n","import React from 'react'\r\nimport s from './CustomSpin.module.css'\r\nimport {Spin} from 'antd'\r\nimport {SpinProps, SpinSize} from 'antd/es/spin'\r\n\r\ntype CustomSpinPropsType = SpinProps & {\r\n\r\n}\r\n\r\nconst CustomSpin: React.FC<CustomSpinPropsType> = React.memo((\r\n    {\r\n        size = 'large' as SpinSize,\r\n        className,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={className || s.base}>\r\n            <Spin size={size} {...restProps}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default CustomSpin\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport {message} from 'antd'\r\nimport LoginForm from './LoginForm'\r\nimport {loginActions, loginThunks, selectLogin} from '../../l2-bll/loginReducer'\r\nimport {PATH} from '../../../../i1-main/m1-ui/u3-routes/Routes'\r\nimport CustomSpin from '../../../../i1-main/m1-ui/u0-common/u5-spins/CustomSpin'\r\nimport {useActions} from '../../../../i1-main/m2-bll/helpers'\r\n\r\nconst LoginFormContainer = React.memo(() => {\r\n    const {token: tokenInParams} = useParams()\r\n    const [token, setToken] = useState<string>(tokenInParams)\r\n    const {isLoading, error, isSuccess} = useSelector(selectLogin)\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true)\r\n    const [redirect, setRedirect] = useState<boolean>(false)\r\n    const [spin, setSpin] = useState<boolean>(!!tokenInParams)\r\n    const {sendTokenThunk, clear} = useActions({...loginActions, ...loginThunks})\r\n\r\n    const sendToken = useCallback(() => {\r\n        if (!isLoading && !isSuccess && token) {\r\n            sendTokenThunk({token})\r\n        } else {\r\n            !token && !firstRendering && message.error('no token')\r\n        }\r\n    }, [isLoading, isSuccess, sendTokenThunk, token, firstRendering])\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n            clear({})\r\n            sendToken()\r\n\r\n            setFirstRendering(false); // + rerender\r\n        } else {\r\n            if (isSuccess && !redirect) {\r\n                message.success('ok!', 1)\r\n                setTimeout(() => setRedirect(true), 500)\r\n            }\r\n            if (error) {\r\n                if (spin) setSpin(false)\r\n                else {\r\n                    message.error(error)\r\n                    clear({})\r\n                }\r\n            }\r\n        }\r\n    }, [firstRendering, setFirstRendering, isSuccess, error, tokenInParams, sendToken, spin, clear, redirect])\r\n\r\n    // callbacks\r\n    // const onFinish = useCallback((values: LoginFormDataType) => {\r\n    //     console.log(values)\r\n    //     sendToken()\r\n    // }, [sendToken])\r\n    // const onFinishFailed = useCallback((errorInfo: LoginFormErrorDataType) => {\r\n    //     console.error('Failed:', errorInfo)\r\n    //     message.error(errorInfo.errorFields[0].errors)\r\n    // }, [])\r\n\r\n    // render\r\n    if (redirect) return <Redirect to={PATH.PROFILE}/>\r\n    if (spin) return <CustomSpin/>\r\n\r\n    return (\r\n        <>\r\n            <LoginForm\r\n                loading={isLoading}\r\n                token={token}\r\n                setToken={setToken}\r\n                sendToken={sendToken}\r\n                // onFinish={onFinish}\r\n                // onFinishFailed={onFinishFailed}\r\n            />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default LoginFormContainer\r\n\r\n\r\n","import React from 'react'\r\nimport s from './LoginPage.module.css'\r\nimport LoginFormContainer from './LoginForm/LoginFormContainer'\r\n\r\nconst LoginPage = React.memo(() => {\r\n\r\n    return (\r\n        <div className={s.LoginPage}>\r\n            <LoginFormContainer/>\r\n\r\n            {/*NewsContainer*/}\r\n\r\n            {/*ChatContainer*/}\r\n\r\n            {/*HelperBotContainer*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LoginPage\r\n","import React from 'react'\r\nimport {Route, Redirect, Switch} from 'react-router-dom'\r\nimport PlaylistsPage from '../../../i2-features/f3-playlists/p1-ui/PlaylistsPage'\r\nimport LoginPage from '../../../i2-features/f1-login/l1-ui/LoginPage'\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    PLAYLISTS: '/playlists',\r\n}\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n\r\n            <Route path={PATH.LOGIN + '/:token'} render={() => <LoginPage/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <LoginPage/>}/>\r\n\r\n            <Route path={PATH.PROFILE} render={() => <div>profile</div>}/>\r\n            <Route path={PATH.PLAYLISTS} render={() => <PlaylistsPage/>}/>\r\n\r\n            <Route render={() => <div>404</div>}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport {PageHeader, Divider} from 'antd'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {PATH} from '../u3-routes/Routes'\r\n\r\nconst Header = React.memo(() => {\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title={(\r\n                    <>\r\n                        Personal Area\r\n                    </>\r\n                )}\r\n                subTitle={(\r\n                    <a\r\n                        href={'https://it-incubator.by/'}\r\n                        rel='noopener noreferrer'\r\n                        target='_blank'\r\n                    >\r\n                        it-incubator\r\n                    </a>\r\n                )}\r\n                extra={[\r\n                    <NavLink to={PATH.LOGIN} key={PATH.LOGIN}>login</NavLink>,\r\n                    <NavLink to={PATH.PROFILE} key={PATH.PROFILE}>profile</NavLink>,\r\n                    // <NavLink to={PATH.PLAYLISTS} key={PATH.PLAYLISTS}>playlists</NavLink>,\r\n                ]}\r\n            />\r\n            <Divider/>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport Routes from '../u3-routes/Routes'\r\nimport Header from '../u4-header/Header'\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n\r\n            <Routes/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import thunkMiddleware from 'redux-thunk'\r\nimport {combineReducers} from 'redux'\r\nimport {appReducer} from './appReducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {playlistsReducer} from '../../i2-features/f3-playlists/p2-bll/playlistsReducer'\r\nimport {loginReducer} from '../../i2-features/f1-login/l2-bll/loginReducer'\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    playlists: playlistsReducer,\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: reducers,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for developers\r\n\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport 'antd/dist/antd.dark.css' // antd\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport Main from '../u2-main/Main'\r\nimport store from '../../m2-bll/store'\r\n\r\n// contexts\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <div className='App'>\r\n                    <Main/>\r\n                </div>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './i1-main/m1-ui/u1-app/App'\nimport * as serviceWorker from './serviceWorker'\n\n// just start\nReactDOM.render(\n    <>\n        <React.StrictMode>{/*off if release*/}\n            <App/>\n        </React.StrictMode>\n    </>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginForm\":\"LoginForm_LoginForm__2Uuqi\",\"form\":\"LoginForm_form__1eLSk\",\"loginButton\":\"LoginForm_loginButton__3Mt46\"};"],"sourceRoot":""}