{"version":3,"sources":["i2-features/f1-login/l1-ui/LoginPage.module.css","i1-main/m1-ui/u0-common/u5-spins/CustomSpin.module.css","i2-features/f1-login/l1-ui/LoginForm/LoginForm.tsx","i1-main/m3-dal/instance.ts","i2-features/f1-login/l3-dal/LoginAPI.ts","i1-main/m2-bll/appReducer.ts","i2-features/f1-login/l2-bll/loginReducer.ts","i1-main/m1-ui/u0-common/u5-spins/CustomSpin.tsx","i1-main/m2-bll/helpers.ts","i2-features/f1-login/l1-ui/LoginForm/LoginFormContainer.tsx","i2-features/f1-login/l1-ui/LoginPage.tsx","i1-main/m1-ui/u0-common/u4-redirets/AuthRedirectPage.tsx","i1-main/m1-ui/u3-routes/Routes.tsx","i1-main/m1-ui/u4-header/Header.tsx","i1-main/m1-ui/u2-main/Main.tsx","i2-features/f3-playlists/p3-dal/PlaylistsAPI.ts","i2-features/f3-playlists/p2-bll/playlistsReducer.ts","i1-main/m2-bll/store.ts","i1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx","i2-features/f1-login/l1-ui/LoginForm/LoginForm.module.css"],"names":["module","exports","LoginForm","React","memo","token","setToken","sendToken","loading","className","s","form","prefix","placeholder","value","autoFocus","maxLength","onChange","e","currentTarget","onPressEnter","suffix","EnterOutlined","onClick","loginButton","instance","axios","create","baseURL","withCredentials","LoginAPI","login","a","post","response","data","me","get","someThunk","createAsyncThunk","payload","thunkAPI","Promise","res","rej","x","z","p","console","log","rejectWithValue","y","meThunk","dispatch","appActions","setLoading","isLoading","setVerified","isVerified","error","message","fulfilled","slice","createSlice","name","initialState","isAuth","reducers","setAuth","state","action","setX","extraReducers","builder","addCase","appReducer","reducer","actions","appThunks","rejected","selectApp","app","sendTokenThunk","loginActions","isSuccess","clear","loginReducer","loginThunks","selectLogin","CustomSpin","size","restProps","base","useActions","useDispatch","useMemo","bindActionCreators","LoginFormContainer","tokenInParams","useParams","useState","useSelector","firstRendering","setFirstRendering","redirect","setRedirect","spin","setSpin","useCallback","useEffect","success","setTimeout","to","PATH","PROFILE","LoginPage","AuthRedirectPage","LOGIN","PLAYLISTS","Routes","path","exact","render","Header","title","subTitle","href","rel","target","extra","key","Main","PlaylistsAPI","then","id","delete","put","playlist","_id","getPlaylists","playlists","undefined","playlistsReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a9449e0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginPage\":\"LoginPage_LoginPage__LrBOi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"base\":\"CustomSpin_base__2qa5N\"};","import React from 'react'\r\nimport s from './LoginForm.module.css'\r\n// import Container from \"../../../../../p1-common/c1-ui/u1-containers/Container\";\r\n// import CustomButton from \"../../../../../p1-common/c1-ui/u2-buttons/CustomButton\";\r\n// import\r\n//     // CustomInput,\r\n// {ClassCustomInput} from \"../../../../../p1-common/c1-ui/u3-inputs/CustomInput\";\r\nimport {EnterOutlined} from '@ant-design/icons'\r\nimport {\r\n    Button, Input,\r\n    // Form,\r\n} from 'antd'\r\n\r\n// export type LoginFormDataType = {\r\n//     token?: string\r\n// }\r\n//\r\n// export type LoginFormErrorDataType = {\r\n//     values: LoginFormDataType\r\n//     errorFields: {\r\n//         name: (string | number)[]\r\n//         errors: string[]\r\n//     }[]\r\n//     outOfDate: boolean\r\n// }\r\n\r\ntype LoginFormPropsType = {\r\n    loading: boolean\r\n    token: string\r\n    setToken: (token: string) => void;\r\n    sendToken: () => void\r\n    // onFinish: (values: LoginFormDataType) => void\r\n    // onFinishFailed: (errorInfo: LoginFormErrorDataType) => void\r\n}\r\n\r\nconst LoginForm: React.FC<LoginFormPropsType> = React.memo((\r\n    {token, setToken, sendToken, loading}\r\n) => {\r\n    return (\r\n        <div className={s.LoginForm}>\r\n            Login\r\n\r\n            <div className={s.form}>\r\n                <Input\r\n                    prefix={'t: '}\r\n                    placeholder={'* please input token'}\r\n                    value={token}\r\n                    autoFocus\r\n                    maxLength={36}\r\n                    onChange={e => setToken(e.currentTarget.value)}\r\n                    onPressEnter={sendToken}\r\n                    suffix={<EnterOutlined onClick={sendToken}/>}\r\n                />\r\n\r\n                <Button\r\n                    className={s.loginButton}\r\n                    loading={loading}\r\n                    onClick={sendToken}\r\n                >\r\n                    Login\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    // return (\r\n    //     <Container className={s.LoginForm}>\r\n    //         login\r\n    //\r\n    //         <Form\r\n    //             name=\"token form\"\r\n    //             initialValues={{token}}\r\n    //             onFinish={onFinish}\r\n    //             onFinishFailed={onFinishFailed}\r\n    //             className={s.form}\r\n    //         >\r\n    //             <Form.Item\r\n    //                 // label=\" \"\r\n    //                 name=\"token\" // !!! warning !!! // Function components cannot be given refs. // if FunctionalInputComponent\r\n    //                 rules={[\r\n    //                     {required: true, message: \"Please input your token!\"},\r\n    //                     // { // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     //     validator: (formItemInfo, inputValue) => {\r\n    //                     //         log(formItemInfo, inputValue);\r\n    //                     //         if (inputValue === \"test\") return Promise.reject('test error');\r\n    //                     //         else return Promise.resolve();\r\n    //                     //     }\r\n    //                     // },\r\n    //                     // {len: 36, message: \"Length must be 36\"}, // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                 ]}\r\n    //             >\r\n    //                 <ClassCustomInput\r\n    //                     // <CustomInput // !!! warning !!! // Function components cannot be given refs. // if FunctionalInputComponent\r\n    //                     // <Input\r\n    //                     prefix={\"t: \"}\r\n    //                     placeholder={\"* please input token\"}\r\n    //                     value={token}\r\n    //                     autoFocus\r\n    //                     maxLength={36}\r\n    //                     onChangeText={setToken} // no in antd Input\r\n    //                     onPressEnter={sendToken}\r\n    //                     suffix={<EnterOutlined onClick={sendToken}/>}\r\n    //\r\n    //                     renderLog={\"7 +-- rendering log() token input\"} // no in antd Input\r\n    //                 />\r\n    //             </Form.Item>\r\n    //\r\n    //             <Form.Item>\r\n    //                 <CustomButton // !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     // <Button //  !!! warning !!! // findDOMNode is deprecated in StrictMode\r\n    //                     htmlType=\"submit\"\r\n    //                     className={s.loginButton}\r\n    //                     loading={loading}\r\n    //\r\n    //                     renderLog={\"7 +-- rendering log() login button\"} // no in antd Button\r\n    //                 >\r\n    //                     Login\r\n    //                     {/*</Button>*/}\r\n    //                 </CustomButton>\r\n    //             </Form.Item>\r\n    //         </Form>\r\n    //     </Container>\r\n    // )\r\n})\r\n\r\nexport default LoginForm\r\n","import axios from 'axios'\r\n\r\n// export const baseURL = 'http://localhost:7542/1.0/'\r\nexport const baseURL = 'https://personal-area-it-incubator.herokuapp.com/1.0/'\r\n\r\nexport const instance = axios.create({\r\n    baseURL,\r\n    withCredentials: true,\r\n})\r\n","import {instance} from '../../../i1-main/m3-dal/instance'\r\n\r\ntype LoginType = {\r\n    error?: string\r\n}\r\n\r\nexport const LoginAPI = {\r\n    login: async (token: string) => {\r\n        const response = await instance.post<LoginType>('/auth/login', {token})\r\n\r\n        return response.data\r\n    },\r\n    me: async () => {\r\n        const response = await instance.get<LoginType>('/auth/me')\r\n\r\n        return response.data\r\n    },\r\n\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from './store'\r\nimport {LoginAPI} from \"../../i2-features/f1-login/l3-dal/LoginAPI\";\r\n\r\n// < {answer}, {params}, {rejectValue {in catch}}>\r\nexport const someThunk = createAsyncThunk<{ z: number }, { x: number }, { rejectValue: { y: number } }>(\r\n    'app/someThunk',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        // thunkAPI.getState() as AppStoreType\r\n        // thunkAPI.dispatch(setX(payload))\r\n\r\n        try {\r\n            const p = await new Promise<{ z: number }>(((res, rej) => {\r\n                if (payload.x < 10) res({z: payload.x})\r\n\r\n                rej({z: payload.x})\r\n            }))\r\n\r\n            // thunkAPI.dispatch(someThunk.fulfilled({z: 1}, 'reqId', {x: 1}))\r\n\r\n            return p\r\n            // return {z: 1}\r\n        } catch (er) {\r\n\r\n            console.log('er', {...er}, er)\r\n            return thunkAPI.rejectWithValue({y: payload.x})\r\n        }\r\n    })\r\nexport const meThunk = createAsyncThunk<{ error?: string }, void, { rejectValue: void }>(\r\n    'app/meThunk',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n\r\n        try {\r\n            const p = await LoginAPI.me()\r\n\r\n            thunkAPI.dispatch(appActions.setVerified({isVerified: true}))\r\n\r\n            return p\r\n        } catch (er) {\r\n            const error = er.response ? er.response.data.error : (er.message + ', more details in the console')\r\n            thunkAPI.dispatch(meThunk.fulfilled({error}, 'xzId2'))\r\n\r\n            console.log('er', {...er}, er)\r\n            console.log('error:', error)\r\n            return thunkAPI.rejectWithValue()\r\n        }\r\n    }\r\n)\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        isAuth: false,\r\n        error: '',\r\n        isVerified: false,\r\n        x: 1, y: 2, z: 3,\r\n        isLoading: false,\r\n    },\r\n    reducers: {\r\n        setAuth: (state, action: PayloadAction<{ isAuth: boolean }>) => {\r\n            state.isAuth = action.payload.isAuth\r\n        },\r\n        setVerified: (state, action: PayloadAction<{ isVerified: boolean }>) => {\r\n            state.isAuth = action.payload.isVerified\r\n            state.isVerified = action.payload.isVerified\r\n            state.isLoading = false\r\n        },\r\n        setX: (state, action: PayloadAction<{ x: number }>) => {\r\n            state.x = action.payload.x\r\n        },\r\n        setLoading: (state, action: PayloadAction<{ isLoading: boolean }>) => {\r\n            state.isLoading = action.payload.isLoading\r\n            state.error = ''\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(\r\n                someThunk.fulfilled,\r\n                (state, action) => {\r\n                    state.z = action.payload.z\r\n                }\r\n            )\r\n            .addCase(\r\n                meThunk.fulfilled,\r\n                (state, action) => {\r\n                    state.error = action.payload.error || ''\r\n                    state.isLoading = false\r\n                }\r\n            )\r\n\r\n    },\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const appActions = slice.actions\r\nexport const someThunkRej = someThunk.rejected\r\nexport const appThunks = {someThunk, meThunk}\r\n\r\nexport const selectApp = (state: AppStoreType) => state.app\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from '../../../i1-main/m2-bll/store'\r\nimport {LoginAPI} from '../l3-dal/LoginAPI'\r\nimport {appActions} from \"../../../i1-main/m2-bll/appReducer\";\r\n\r\n// < {answer}, {params}, {rejectValue {in catch}}>\r\nexport const sendTokenThunk =\r\n    createAsyncThunk<{ error?: string }, { token: string }, { rejectValue: { token: string } }>(\r\n        'login/sendTokenThunk',\r\n        async (\r\n            payload, thunkAPI\r\n        ) => {\r\n            // thunkAPI.getState() as AppStoreType\r\n            thunkAPI.dispatch(loginActions.setLoading({isLoading: true}))\r\n\r\n            try {\r\n                // const p = await new Promise<{ error: string }>(((res, rej) => {\r\n                //     if (payload.token.length > 3) setTimeout(() => res({error: ''}), 1500)\r\n                //\r\n                //     else setTimeout(() => rej({error: 'not valid token'}), 1500)\r\n                // }))\r\n                const p = await LoginAPI.login(payload.token)\r\n\r\n                // thunkAPI.dispatch(sendTokenThunk\r\n                //     .fulfilled({error: p.error}, 'xzId1', {token: payload.token}))\r\n                thunkAPI.dispatch(appActions.setAuth({isAuth: true}))\r\n\r\n                return p\r\n            } catch (er) {\r\n                const error = er.response ? er.response.data.error : (er.message + ', more details in the console')\r\n\r\n\r\n                thunkAPI.dispatch(sendTokenThunk\r\n                    .fulfilled({error}, 'xzId1', {token: payload.token}))\r\n\r\n                console.log('er', {...er}, er)\r\n                console.log('error:', error)\r\n                return thunkAPI.rejectWithValue({token: payload.token})\r\n            }\r\n        }\r\n    )\r\n\r\nconst slice = createSlice({\r\n    name: 'login',\r\n    initialState: {\r\n        isLoading: false,\r\n        isSuccess: false,\r\n        error: '',\r\n    },\r\n    reducers: {\r\n        clear: (state, action: PayloadAction<void>) => {\r\n            state.isLoading = false\r\n            state.isSuccess = false\r\n            state.error = ''\r\n        },\r\n        setLoading: (state, action: PayloadAction<{ isLoading: boolean }>) => {\r\n            state.isLoading = action.payload.isLoading\r\n        }\r\n\r\n    },\r\n    // extraReducers: {\r\n    //     // 'blabla': state => {},\r\n    //     // [someAC.type]: state => {},\r\n    // },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(setX, (state, action) => {\r\n        //     state.y = action.payload.x\r\n        // })\r\n        builder\r\n            .addCase(\r\n                sendTokenThunk.fulfilled,\r\n                (state, action) => {\r\n                    state.isSuccess = !action.payload.error\r\n                    state.error = action.payload.error || ''\r\n                    state.isLoading = false\r\n                }\r\n            )\r\n        // .addCase() ...\r\n\r\n    },\r\n})\r\n\r\nexport const loginReducer = slice.reducer\r\nexport const loginActions = slice.actions\r\n// export const someThunkRej = someThunk.rejected\r\nexport const loginThunks = {sendTokenThunk}\r\n\r\nexport const selectLogin = (state: AppStoreType) => state.login\r\n","import React from 'react'\r\nimport s from './CustomSpin.module.css'\r\nimport {Spin} from 'antd'\r\nimport {SpinProps, SpinSize} from 'antd/es/spin'\r\n\r\ntype CustomSpinPropsType = SpinProps & {\r\n\r\n}\r\n\r\nconst CustomSpin: React.FC<CustomSpinPropsType> = React.memo((\r\n    {\r\n        size = 'large' as SpinSize,\r\n        className,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div className={className || s.base}>\r\n            <Spin size={size} {...restProps}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default CustomSpin\r\n","import {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\nimport store from './store'\r\n\r\nexport type AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\r\n\r\n// https://medium.com/@d.maklygin/redux-typescript-reuse-the-type-of-an-action-creators-return-value-91663a48858f\r\ntype IsValidArg<T> = T extends object ? keyof T extends never ? false : true : true;\r\nexport type ActionCreatorResponse<T extends (...args: any[]) => any> = ReturnType<ReturnType<T>>\r\nexport type ReplaceReturnType<T, TNewReturn> = T extends (a: infer A) => infer R\r\n    ? (IsValidArg<A> extends true ? (a: A) => TNewReturn : () => TNewReturn)\r\n    : never\r\nexport type RemapActionCreators<T extends ActionCreatorsMapObject> = {\r\n    [K in keyof T]: ReplaceReturnType<T[K], ActionCreatorResponse<T[K]>>\r\n}\r\n\r\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\r\n    const dispatch = useAppDispatch()\r\n\r\n    // return useMemo(() => bindActionCreators<T, any>(actions, dispatch), [actions, dispatch])\r\n    return useMemo(() => bindActionCreators<T, RemapActionCreators<T>>(actions, dispatch), [actions, dispatch])\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect, useParams} from 'react-router-dom'\r\nimport {message} from 'antd'\r\nimport LoginForm from './LoginForm'\r\nimport {loginActions, loginThunks, selectLogin} from '../../l2-bll/loginReducer'\r\nimport {PATH} from '../../../../i1-main/m1-ui/u3-routes/Routes'\r\nimport CustomSpin from '../../../../i1-main/m1-ui/u0-common/u5-spins/CustomSpin'\r\nimport {useActions} from '../../../../i1-main/m2-bll/helpers'\r\n\r\nconst LoginFormContainer = React.memo(() => {\r\n    const {token: tokenInParams} = useParams()\r\n    const [token, setToken] = useState<string>(tokenInParams)\r\n    const {isLoading, error, isSuccess} = useSelector(selectLogin)\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true)\r\n    const [redirect, setRedirect] = useState<boolean>(false)\r\n    const [spin, setSpin] = useState<boolean>(!!tokenInParams)\r\n    const {sendTokenThunk, clear} = useActions({...loginActions, ...loginThunks})\r\n\r\n    const sendToken = useCallback(() => {\r\n        if (!isLoading && !isSuccess && token) {\r\n            sendTokenThunk({token})\r\n        } else {\r\n            !token && !firstRendering && message.error('no token')\r\n        }\r\n    }, [isLoading, isSuccess, sendTokenThunk, token, firstRendering])\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n            clear({})\r\n            sendToken()\r\n\r\n            setFirstRendering(false); // + rerender\r\n        } else {\r\n            if (isSuccess && !redirect) {\r\n                message.success('ok!', 1)\r\n                setTimeout(() => setRedirect(true), 500)\r\n            }\r\n            if (error) {\r\n                if (spin) setSpin(false)\r\n                else {\r\n                    message.error(error)\r\n                    clear({})\r\n                }\r\n            }\r\n        }\r\n    }, [firstRendering, setFirstRendering, isSuccess, error, tokenInParams, sendToken, spin, clear, redirect])\r\n\r\n    // callbacks\r\n    // const onFinish = useCallback((values: LoginFormDataType) => {\r\n    //     console.log(values)\r\n    //     sendToken()\r\n    // }, [sendToken])\r\n    // const onFinishFailed = useCallback((errorInfo: LoginFormErrorDataType) => {\r\n    //     console.error('Failed:', errorInfo)\r\n    //     message.error(errorInfo.errorFields[0].errors)\r\n    // }, [])\r\n\r\n    // render\r\n    if (redirect) return <Redirect to={PATH.PROFILE}/>\r\n    if (spin) return <CustomSpin/>\r\n\r\n    return (\r\n        <>\r\n            <LoginForm\r\n                loading={isLoading}\r\n                token={token}\r\n                setToken={setToken}\r\n                sendToken={sendToken}\r\n                // onFinish={onFinish}\r\n                // onFinishFailed={onFinishFailed}\r\n            />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default LoginFormContainer\r\n\r\n\r\n","import React from 'react'\r\nimport s from './LoginPage.module.css'\r\nimport LoginFormContainer from './LoginForm/LoginFormContainer'\r\n\r\nconst LoginPage = React.memo(() => {\r\n\r\n    return (\r\n        <div className={s.LoginPage}>\r\n            <LoginFormContainer/>\r\n\r\n            {/*NewsContainer*/}\r\n\r\n            {/*ChatContainer*/}\r\n\r\n            {/*HelperBotContainer*/}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LoginPage\r\n","import React, {DetailedHTMLProps, HTMLAttributes, useEffect, useState} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {message} from 'antd'\r\nimport {Redirect} from 'react-router-dom'\r\nimport CustomSpin from '../u5-spins/CustomSpin'\r\nimport {appThunks, selectApp} from '../../../m2-bll/appReducer'\r\nimport {PATH} from '../../u3-routes/Routes'\r\nimport {useActions} from \"../../../m2-bll/helpers\";\r\n\r\ntype DivPropsType = DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>\r\n\r\ntype AuthRedirectPagePropsType = DivPropsType & {\r\n\r\n}\r\n\r\nconst AuthRedirectPage: React.FC<AuthRedirectPagePropsType> = React.memo((\r\n    {\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const {isVerified, isLoading, error} = useSelector(selectApp);\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n    const [spin, setSpin] = useState<boolean>(!isVerified)\r\n    const {meThunk} = useActions({...appThunks})\r\n\r\n    useEffect(() => {\r\n        if (firstRendering) {\r\n\r\n            if (!isVerified) {\r\n                meThunk({})\r\n            }\r\n            setFirstRendering(false) // + rerender\r\n        } else {\r\n            if (!isVerified && !isLoading && !redirect) {\r\n                message.error('Not logged in! ' + error)\r\n                setTimeout(() => setRedirect(true), 1500);\r\n            } else {\r\n                spin && !isLoading && setSpin(false)\r\n            }\r\n        }\r\n    }, [firstRendering, setFirstRendering, isVerified, setRedirect, spin, setSpin, isLoading, meThunk, error]);\r\n\r\n    if (redirect) return <Redirect to={PATH.LOGIN}/>\r\n    if (spin) return <CustomSpin/>\r\n\r\n    return (\r\n        <>\r\n            <div {...restProps}/>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default AuthRedirectPage\r\n","import React from 'react'\r\nimport {Route, Redirect, Switch} from 'react-router-dom'\r\nimport PlaylistsPage from '../../../i2-features/f3-playlists/p1-ui/PlaylistsPage'\r\nimport LoginPage from '../../../i2-features/f1-login/l1-ui/LoginPage'\r\nimport AuthRedirectPage from '../u0-common/u4-redirets/AuthRedirectPage'\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    PLAYLISTS: '/playlists',\r\n}\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n\r\n            <Route path={PATH.LOGIN + '/:token'} render={() => <LoginPage/>}/>\r\n            <Route path={PATH.LOGIN} render={() => <LoginPage/>}/>\r\n\r\n            <Route path={PATH.PROFILE} render={() => <AuthRedirectPage><div>profile</div></AuthRedirectPage>}/>\r\n            {/*<Route path={PATH.PLAYLISTS} render={() => <PlaylistsPage/>}/>*/}\r\n\r\n            <Route render={() => <div>404</div>}/>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react'\r\nimport {PageHeader, Divider} from 'antd'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {PATH} from '../u3-routes/Routes'\r\n\r\nconst Header = React.memo(() => {\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title={(\r\n                    <>\r\n                        Personal Area\r\n                    </>\r\n                )}\r\n                subTitle={(\r\n                    <a\r\n                        href={'https://it-incubator.by/'}\r\n                        rel='noopener noreferrer'\r\n                        target='_blank'\r\n                    >\r\n                        it-incubator\r\n                    </a>\r\n                )}\r\n                extra={[\r\n                    <NavLink to={PATH.LOGIN} key={PATH.LOGIN}>login</NavLink>,\r\n                    <NavLink to={PATH.PROFILE} key={PATH.PROFILE}>profile</NavLink>,\r\n                    // <NavLink to={PATH.PLAYLISTS} key={PATH.PLAYLISTS}>playlists</NavLink>,\r\n                ]}\r\n            />\r\n            <Divider/>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport Routes from '../u3-routes/Routes'\r\nimport Header from '../u4-header/Header'\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div>\r\n            <Header/>\r\n\r\n            <Routes/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import {instance} from '../../../i1-main/m3-dal/instance'\r\n\r\nexport type PlaylistType = {\r\n    _id: string\r\n\r\n    name: string\r\n    levelAccess: number\r\n    tags: string[]\r\n    // position number\r\n    // start/end date access\r\n\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type GetAllAnswerType = {\r\n    playlists: PlaylistType[]\r\n    playlistsTotalCount: number\r\n}\r\n\r\nexport const PlaylistsAPI = {\r\n    getAll: () => {\r\n        return instance.get<GetAllAnswerType>('playlists')\r\n            .then(res => res.data)\r\n    },\r\n    add: (data: any) => {\r\n        return instance.post<GetAllAnswerType>('playlists2', data)\r\n            .then(res => res.data)\r\n    },\r\n    delete: (id: string) => {\r\n        return instance.delete<GetAllAnswerType>('playlists/' + id)\r\n            .then(res => res.data)\r\n    },\r\n    update: (id: string) => {\r\n        return instance.put<GetAllAnswerType>('playlists', {\r\n            playlist: {\r\n                _id: id,\r\n                name: 'new Pl',\r\n            }\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n}\r\n","import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {AppStoreType} from \"../../../i1-main/m2-bll/store\";\r\nimport {PlaylistsAPI, PlaylistType} from \"../p3-dal/PlaylistsAPI\";\r\nimport {appActions} from \"../../../i1-main/m2-bll/appReducer\";\r\n\r\nexport const getPlaylists = createAsyncThunk<{playlists: PlaylistType[]}, { }, { rejectValue: {error: any} }>(\r\n    'playlists/getPlaylists',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        // thunkAPI.getState() as AppStoreType\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n\r\n        try {\r\n            const p = await PlaylistsAPI.getAll()\r\n\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n\r\n            return {playlists: p.playlists}\r\n        } catch (er) {\r\n\r\n            console.log('er', {...er}, er)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: {...er}})\r\n        }\r\n    })\r\nexport const addPlaylist = createAsyncThunk<{}, {}, { rejectValue: { error: any } }>(\r\n    'playlists/addPlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.add(undefined)\r\n\r\n\r\n            // thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\nexport const deletePlaylist = createAsyncThunk<{}, {id: string}, { rejectValue: { error: any } }>(\r\n    'playlists/deletePlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.delete(payload.id)\r\n\r\n\r\n            thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\nexport const updatePlaylist = createAsyncThunk<{}, {id: string}, { rejectValue: { error: any } }>(\r\n    'playlists/updatePlaylist',\r\n    async (payload, thunkAPI\r\n    ) => {\r\n        thunkAPI.dispatch(appActions.setLoading({isLoading: true}))\r\n        try {\r\n            await PlaylistsAPI.update(payload.id)\r\n\r\n\r\n            thunkAPI.dispatch(getPlaylists({}))\r\n\r\n            return;\r\n        } catch (e) {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n\r\n            console.log('Nya, ' + 'playlists' + ' Error!', {...e})\r\n\r\n            console.log('error: ', error)\r\n            thunkAPI.dispatch(appActions.setLoading({isLoading: false}))\r\n            return thunkAPI.rejectWithValue({error: error})\r\n        }\r\n    })\r\n\r\nconst slice = createSlice({\r\n    name: 'playlists',\r\n    initialState: {\r\n       playlists: [] as PlaylistType[]\r\n    },\r\n    reducers: {\r\n        // setX: (state, action: PayloadAction<{ x: number }>) => {\r\n        //     state.x = action.payload.x\r\n        // },\r\n\r\n    },\r\n    // extraReducers: {\r\n    //     // 'blabla': state => {},\r\n    //     // [someAC.type]: state => {},\r\n    // },\r\n    extraReducers: (builder) => {\r\n        // builder.addCase(setX, (state, action) => {\r\n        //     state.y = action.payload.x\r\n        // })\r\n\r\n        builder\r\n            .addCase(getPlaylists.fulfilled, (state, action) => {\r\n                state.playlists = action.payload.playlists\r\n            })\r\n            // .addCase() ...\r\n\r\n    },\r\n})\r\n\r\nexport const playlistsReducer = slice.reducer\r\nexport const playlistsActions = slice.actions\r\nexport const playlistsThunks = {getPlaylists, addPlaylist, deletePlaylist, updatePlaylist}\r\n// export const someThunkRej = someThunk.rejected\r\n// export const appThunks = {someThunk}\r\n//\r\nexport const selectPlaylists = (state: AppStoreType) => state.playlists\r\n","import thunkMiddleware from 'redux-thunk'\r\nimport {combineReducers} from 'redux'\r\nimport {appReducer} from './appReducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {playlistsReducer} from '../../i2-features/f3-playlists/p2-bll/playlistsReducer'\r\nimport {loginReducer} from '../../i2-features/f1-login/l2-bll/loginReducer'\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    playlists: playlistsReducer,\r\n})\r\n\r\nconst store = configureStore({\r\n    reducer: reducers,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n})\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nwindow.store = store // for developers\r\n\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport 'antd/dist/antd.dark.css' // antd\r\nimport {Provider} from 'react-redux'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport Main from '../u2-main/Main'\r\nimport store from '../../m2-bll/store'\r\n\r\n// contexts\r\nconst App = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <div className='App'>\r\n                    <Main/>\r\n                </div>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './i1-main/m1-ui/u1-app/App'\nimport * as serviceWorker from './serviceWorker'\n\n// just start\nReactDOM.render(\n    <>\n        <React.StrictMode>{/*off if release*/}\n            <App/>\n        </React.StrictMode>\n    </>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginForm\":\"LoginForm_LoginForm__2Uuqi\",\"form\":\"LoginForm_form__1eLSk\",\"loginButton\":\"LoginForm_loginButton__3Mt46\"};"],"sourceRoot":""}